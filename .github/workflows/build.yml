name: release

on:
  push:
    tags:
      - pypi-*
  pull_request:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-11, windows-2022]

    steps:
      - uses: actions/checkout@v3
      - uses: actions/checkout@v3
        with:
          repository: tree-sitter/py-tree-sitter
          ref: v0.20.0
          path: py-tree-sitter
      - uses: actions/checkout@v3
        with:
          repository: grantjenks/py-tree-sitter-languages
          ref: v1.4.0
          path: py-tree-sitter-languages

      - uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      # Using python because I don't want to do everything twice with bash and windows syntax
      - run: |
          import os
          import shutil

          shutil.copytree("py-tree-sitter/tree_sitter", "tree_sitter")
          shutil.copytree("py-tree-sitter-languages/tree_sitter_languages", "tree_sitter_languages")
          shutil.copyfile("py-tree-sitter-languages/build.py", "build.py")
          shutil.copyfile("py-tree-sitter-languages/repos.txt", "repos.txt")

          # Create a tests directory that contains tests from both py-tree-sitter and py-tree-sitter-languages.
          #
          # Note that there is no __init__.py!
          # cibuildwheel uses a funny working directory when running tests.
          # This is by design, this way tests import whatever is installed and not from the project.
          # If there is __init__.py, it causes pytest to be "helpful" by making sys.path[0] the project directory.
          os.mkdir("tests")
          assert set(os.listdir("py-tree-sitter/tests")) == {"__init__.py", "test_tree_sitter.py"}
          assert set(os.listdir("py-tree-sitter-languages/tests")) == {"test_tree_sitter_languages.py"}
          shutil.copyfile("py-tree-sitter/tests/test_tree_sitter.py", "tests/test_tree_sitter.py")
          shutil.copyfile("py-tree-sitter-languages/tests/test_tree_sitter_languages.py", "tests/test_tree_sitter_languages.py")

        shell: python

      # Change test_tree_sitter.py to use py-tree-sitter-languages
      - run: git apply py-tree-sitter-tests.patch

      # Get CIBW_... environment variables from py-tree-sitter-languages to the current environment.
      # They use pytest to run tests, which is fine even though py-tree-sitter uses unittest:
      # pytest is compatible with tests written for unittest.
      - run: pip install PyYAML==6.0
      - run: |
          with open("py-tree-sitter-languages/.github/workflows/release.yml") as file:
              steps = yaml.safe_load(file)["jobs"]["build"]["steps"]

          [cibw_env] = [s["env"] for s in steps if s.get("run") == "python -m cibuildwheel --output-dir wheelhouse"]
          assert len(cibw_env) == 5
          assert all(k.startswith("CIBW_") for k in cibw_env.keys())

          # https://stackoverflow.com/a/57969570
          with open(os.environ["GITHUB_ENV"], "a") as file:
              for k, v in cibw_env.items():
                  file.write(f"{k}={v}\n")

        shell: python

      # Build wheels
      - run: pip install cibuildwheel==2.9.0
      - run: python -m cibuildwheel --output-dir wheelhouse

      # Make wheels downloadable from GitHub UI and from the pypi step
      - uses: actions/upload-artifact@v2
        with:
          name: wheelhouse
          path: ./wheelhouse/*.whl

  release:
    runs-on: ubuntu-latest
    # https://stackoverflow.com/a/58478262
    needs: [build]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: wheelhouse
          path: dist
      - run: ls -la
      - run: ls -la dist

      # To trigger a release:
      #
      #   $ git tag pypi-$(date +%Y.%m.%d)
      #   $ git push --tags origin main
      #
      # To get consistent timestamps, avoid doing this just before midnight UTC.
      - if: startsWith(github.ref, 'refs/tags/pypi-')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
